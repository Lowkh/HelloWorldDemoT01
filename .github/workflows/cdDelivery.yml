name: Python CICD for delivery
on:
  push:
    tags:
      - 'v*'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8 test
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov
    
    - name: Checkout Own Repo to cloud
      uses: actions/checkout@v2.4.0
      with: 
        repository: lowkh/HelloWorldDemoT01
    
    - name: Checkout private repo remotely
      uses: actions/checkout@v2
      with:
        repository: lowkh2/DevOpsQARepo
        path: tests
        token: ${{ secrets.QA_REMOTE }}
    
    - name: Linter Check with Flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics 
      
    - name: Begin Pytest
      run: |
        ls
        mv ./tests/*.* ./
        pytest --cov -v --junitxml=report.xml
    
    - if: ${{failure()}}       
      name: Create Issues
      uses: nashmaniac/create-issue-action@v1.1
      with:
          title: Build Failed
          token: ${{secrets.GITHUB_TOKEN}}
          assignees: ${{github.actor}}
          labels: worflow-failed
          body: Workflow failed for commit ${{github.sha}} @ ${{github.ref}}
    
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1.5
      if: always()
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        files: report.xml
        
  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov
    - name: Set environment variables for version number
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    - name: Echo Version Tag
      run: |
        echo $RELEASE_VERSION
        echo ${{ env.RELEASE_VERSION }}    
    - name: Create Download Directory
      run: mkdir downloads

    - name: Create docs
      run: |
        python -m pydoc -w ./
        mv *.html ./downloads
    - name: upload documents
      uses: actions/upload-artifact@v2
      with:
        name: assetDocuments
        path: downloads      
    - name: Download Content
      uses: actions/download-artifact@v2
      with:
        name: assetDocuments        
    - name: Create GitHub release
      id: create-new-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_VERSION }}
        release_name: Release ${{ env.RELEASE_VERSION }}      
    - name: Archive site content
      uses: thedoctor0/zip-release@master
      with:
        filename: content.zip
    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-new-release.outputs.upload_url }}
        asset_path: ./content.zip
        asset_name: ${{ env.RELEASE_VERSION }}.zip
        asset_content_type: application/zip
